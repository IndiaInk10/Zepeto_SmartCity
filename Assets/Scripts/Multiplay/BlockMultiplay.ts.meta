fileFormatVersion: 2
guid: acb6cee3d235bab458a0bc2ba9fce524
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst
    ZEPETO_Multiplay_1 = require(\\\"ZEPETO.Multiplay\\\");\\r\\nconst ZEPETO_Script_1
    = require(\\\"ZEPETO.Script\\\");\\r\\nconst ZEPETO_Character_Controller_1 =
    require(\\\"ZEPETO.Character.Controller\\\");\\r\\nconst CharacterEventChecker_1
    = require(\\\"./CharacterEventChecker\\\");\\r\\nconst CarrierParentController_1
    = require(\\\"./CarrierParentController\\\");\\r\\nconst MultiMovingBlock_1 =
    require(\\\"./MultiMovingBlock\\\");\\r\\nconst MultiOrbitingBlock_1 = require(\\\"./MultiOrbitingBlock\\\");\\r\\nclass
    BlockMultiplay extends ZEPETO_Script_1.ZepetoScriptBehaviour {\\r\\n    constructor()
    {\\r\\n        super(...arguments);\\r\\n        // Current block index\\r\\n       
    this.blockIdx = 0;\\r\\n        this.originCharacterParents = new Map();\\r\\n       
    this.characterContexts = new Map();\\r\\n        this.carrierParents = new Map();\\r\\n       
    // Variable required for block movement. \\r\\n        this.gameStartTimestampFromServer
    = 0;\\r\\n        this.diffTimestamp = 0;\\r\\n        // If the game has been
    paused via app background mode. \\r\\n        this.bPaused = false;\\r\\n       
    this.isLanding = new Map();\\r\\n        this.playerTargetPosition = new Map();\\r\\n       
    this.jumpCoroutines = new Map();\\r\\n        this.changeTargetPositionCoroutines
    = new Map();\\r\\n        this.playerJumpDistances = new Map();\\r\\n       
    this.playerFlightDuration = new Map();\\r\\n        this.playerJumpDistance =
    3;\\r\\n        this.waitForChangeTargetSeconds = new UnityEngine_1.WaitForSeconds(0.1);\\r\\n       
    this.isLandingPlatform = new Map();\\r\\n        this.MESSAGE_TYPE_ServerTimestamp
    = \\\"ServerTimestamp\\\";\\r\\n        this.MESSAGE_TYPE_OnBlockTriggerEnter
    = \\\"OnBlockTriggerEnter\\\";\\r\\n        this.MESSAGE_TYPE_OnCharacterLandedBlock
    = \\\"OnCharacterLandedBlock\\\";\\r\\n        this.MESSAGE_TYPE_OnCharacterJumpOnBlock
    = \\\"OnCharacterJumpOnBlock\\\";\\r\\n        this.MESSAGE_TYPE_OnTryJump =
    \\\"OnTryJump\\\";\\r\\n        this.MESSAGE_TYPE_OnPlatformState = \\\"OnPlatformState\\\";\\r\\n       
    this.MESSAGE_TYPE_OnFallTriggerEnter = \\\"OnFallTriggerEnter\\\";\\r\\n       
    this.MESSAGE_TYPE_OnTryJumpForMovingToBlock = \\\"OnTryJumpForMovingToBlock\\\";\\r\\n       
    this.MESSAGE_TYPE_OnLeavePlayer = \\\"OnLeavePlayer\\\";\\r\\n        this.MOVINGBLOCK
    = 0;\\r\\n        this.ORBITINGBLOCK = 1;\\r\\n        this.FIRSTBLOCK = 2;\\r\\n   
    }\\r\\n    /* Singleton */\\r\\n    static GetInstance() {\\r\\n        if (!BlockMultiplay.Instance)
    {\\r\\n            const targetObj = UnityEngine_1.GameObject.Find(\\\"BlockMultiplay\\\");\\r\\n           
    if (targetObj)\\r\\n                BlockMultiplay.Instance = targetObj.GetComponent($typeof(BlockMultiplay));\\r\\n       
    }\\r\\n        return BlockMultiplay.Instance;\\r\\n    }\\r\\n    Start() {\\r\\n       
    this.bPaused = false;\\r\\n        this.blockIdx = 0;\\r\\n        this.movingBlockScripts
    = new Array(this.movingBlocks.length);\\r\\n        this.orbitingBlockScripts
    = new Array(this.orbitingBlocks.length);\\r\\n        for (let i = 0; i < this.movingBlocks.length;
    i++) {\\r\\n            this.movingBlockScripts[i] = this.movingBlocks[i].GetComponent($typeof(MultiMovingBlock_1.default));\\r\\n           
    this.movingBlockScripts[i].SetBlockIdx(this.blockIdx++);\\r\\n        }\\r\\n       
    for (let i = 0; i < this.orbitingBlocks.length; i++) {\\r\\n            this.orbitingBlockScripts[i]
    = this.orbitingBlocks[i].GetComponent($typeof(MultiOrbitingBlock_1.default));\\r\\n           
    this.orbitingBlockScripts[i].SetBlockIdx(this.blockIdx++);\\r\\n        }\\r\\n       
    this.multiplay.add_RoomCreated((room) => {\\r\\n            this.room = room;\\r\\n           
    this.AddMessageHandlersForBlockSync();\\r\\n            this.AddMessageHandlersForCharacterSync();\\r\\n       
    });\\r\\n        // Add local character - block collision event. \\r\\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(()
    => {\\r\\n            ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character.gameObject.AddComponent($typeof(CharacterEventChecker_1.default));\\r\\n       
    });\\r\\n    }\\r\\n    OnApplicationPause(pause) {\\r\\n        // If returning
    from background pause, update block positioning. \\r\\n        if (pause) {\\r\\n           
    this.bPaused = true;\\r\\n        }\\r\\n        else {\\r\\n            if (this.bPaused)
    {\\r\\n                this.bPaused = false;\\r\\n                // current
    timestamp \\r\\n                let curClientTimestamp = +new Date();\\r\\n               
    // elapsed time = - current timestamp - (game start time + difference) // ex.
    3Months 6Days 30Seconds - (3Months 1Day + 5Days)\\r\\n                let elapsedTime
    = curClientTimestamp - (this.gameStartTimestampFromServer + this.diffTimestamp);\\r\\n               
    // Convert to seconds for block movement. \\r\\n                let timestampSecond
    = elapsedTime / 1000;\\r\\n                // Update the passed time to each
    moving block to their corresponding rooms. \\r\\n                for (let i =
    0; i < this.movingBlockScripts.length; i++) {\\r\\n                    this.movingBlockScripts[i].InitMultiplayMode(timestampSecond);\\r\\n               
    }\\r\\n                // Update the passed time to each orbiting block to their
    corresponding rooms. \\r\\n                for (let i = 0; i < this.orbitingBlockScripts.length;
    i++) {\\r\\n                    this.orbitingBlockScripts[i].InitMultiplayMode(timestampSecond);\\r\\n               
    }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    /* AddMessageHandlersForBlockSync()\\r\\n      
    - Message Handlers for block position sync.\\r\\n    */\\r\\n    AddMessageHandlersForBlockSync()
    {\\r\\n        // When first joining the server \uCC98\uC74C \uC11C\uBC84\uC5D0
    Join \uC2DC \uAC8C\uC784\uC2DC\uC791 timestamp\uC640 \uD50C\uB808\uC774\uC5B4
    \uC811\uC18D\uC2DC\uC810 timestamp\uB97C \uC804\uB2EC \uBC1B\uC2B5\uB2C8\uB2E4.\\r\\n       
    this.room.AddMessageHandler(this.MESSAGE_TYPE_ServerTimestamp, (message) => {\\r\\n           
    let timestampInfo = {\\r\\n                gameStartTimestamp: message.gameStartTimestamp,\\r\\n               
    playerJoinTimestamp: message.playerJoinTimestamp\\r\\n            };\\r\\n           
    // Cache the server's game start time. \\r\\n            this.gameStartTimestampFromServer
    = Number(timestampInfo.gameStartTimestamp);\\r\\n            // Catche the player
    join time from the server. \\r\\n            let playerJoinTimestampFromServer
    = Number(timestampInfo.playerJoinTimestamp);\\r\\n            // Current client
    time. \\r\\n            let curClientTimeStamp = +new Date();\\r\\n           
    // Save the difference between the server timestamp and the client timestamp.
    \\r\\n            // - For applying the difference after returning from the background.
    \\r\\n            let diff = curClientTimeStamp - playerJoinTimestampFromServer;\\r\\n           
    this.diffTimestamp = diff; // save the time difference. \\r\\n            //
    Elapsed time since game start. \\r\\n            let elapsedTime = playerJoinTimestampFromServer
    - this.gameStartTimestampFromServer;\\r\\n            // Convert to seconds for
    block movement calculation. \\r\\n            let timestampSecond = elapsedTime
    / 1000;\\r\\n            // Send the elapsed time to each block. \\r\\n           
    for (let i = 0; i < this.movingBlockScripts.length; i++) {\\r\\n               
    this.movingBlockScripts[i].InitMultiplayMode(timestampSecond);\\r\\n           
    }\\r\\n            for (let i = 0; i < this.orbitingBlockScripts.length; i++)
    {\\r\\n                this.orbitingBlockScripts[i].InitMultiplayMode(timestampSecond);\\r\\n           
    }\\r\\n        });\\r\\n    }\\r\\n    /* AddMessageHandlersForCharacterSync()\\r\\n      
    - Message handlers for Character position syncing\\r\\n       MESSAGE_TYPE_OnPlatformState
    : When the character lands on a platform.\\r\\n       MESSAGE_TYPE_OnTryJumpForMovingToBlock
    : When the character initiates movement from platform to block.\\r\\n       MESSAGE_TYPE_OnCharacterLandedBlock
    : When the character lands on a moving block\\r\\n       MESSAGE_TYPE_OnCharacterJumpOnBlock
    : When the character jump on a block\\r\\n       MESSAGE_TYPE_OnFallTriggerEnter
    : When the character falls into a falltrigger.\\r\\n       MESSAGE_TYPE_OnLeavePlayer
    : When the character leaves the room.\\r\\n    */\\r\\n    AddMessageHandlersForCharacterSync()
    {\\r\\n        // When the character lands from moving block to platform, assign
    transport parent to original parent. \\r\\n        this.room.AddMessageHandler(this.MESSAGE_TYPE_OnPlatformState,
    (message) => {\\r\\n            // Return the context to original parent for
    running Base synchronization logic\\r\\n            const sessionId = message.toString();\\r\\n           
    if (false == this.characterContexts.has(sessionId)) {\\r\\n                return;\\r\\n           
    }\\r\\n            this.ResetOriginParent(sessionId);\\r\\n            this.ResetJumpToBlockSetting(sessionId);\\r\\n       
    });\\r\\n        // When the character attemps to land on a moving block from
    a platform. \\r\\n        this.room.AddMessageHandler(this.MESSAGE_TYPE_OnTryJumpForMovingToBlock,
    (message) => {\\r\\n            const relativeVector = new UnityEngine_1.Vector3(message.posX,
    message.posY, message.posZ);\\r\\n            const platformPosition = new UnityEngine_1.Vector3(message.relativeX,
    message.relativeY, message.relativeZ);\\r\\n            const sessionId = message.sessionId;\\r\\n           
    this.SetCarrierParentAndZepetoContext(sessionId);\\r\\n            //When the
    character moves from platform to moving block, send -1 as the index and send
    the jump position. \\r\\n            this.SetJumpToBlockSetting(sessionId, -1,
    relativeVector, this.FIRSTBLOCK, platformPosition);\\r\\n        });\\r\\n       
    // When the character lands on the block send the relative position vector as
    a message. \\r\\n        this.room.AddMessageHandler(this.MESSAGE_TYPE_OnCharacterLandedBlock,
    (message) => {\\r\\n            // \uD574\uB2F9 \uCE90\uB9AD\uD130\uB97C \uBE14\uB85D
    \uC704\uB85C \uD154\uB808\uD3EC\uD2B8\\r\\n            this.TeleportCharacterOnBlock(message);\\r\\n       
    });\\r\\n        // When the character jumps from a block, send the relative
    position vector as a message. \\r\\n        this.room.AddMessageHandler(this.MESSAGE_TYPE_OnCharacterJumpOnBlock,
    (message) => {\\r\\n            this.OnBlockTriggerExit(message);\\r\\n       
    });\\r\\n        // Send a message for when the characte ralls off the block.
    \\r\\n        this.room.AddMessageHandler(this.MESSAGE_TYPE_OnFallTriggerEnter,
    (message) => {\\r\\n            const sessionId = message.toString();\\r\\n           
    this.ResetJumpToBlockSetting(sessionId);\\r\\n            // Character respawn.
    \\r\\n            if (this.carrierParents.has(sessionId)) {\\r\\n               
    this.StartCoroutine(this.RespwanCharacter(sessionId));\\r\\n            }\\r\\n       
    });\\r\\n        // Recieve a message when the player leaves the room. \\r\\n       
    this.room.AddMessageHandler(this.MESSAGE_TYPE_OnLeavePlayer, (message) => {\\r\\n           
    const sessionId = message.toString();\\r\\n            // Destroy the inspectors
    used by the player. \\r\\n            if (this.carrierParents.has(sessionId))
    {\\r\\n                this.carrierParents.delete(sessionId);\\r\\n           
    }\\r\\n            if (this.characterContexts.has(sessionId)) {\\r\\n               
    this.characterContexts.delete(sessionId);\\r\\n            }\\r\\n           
    if (this.originCharacterParents.has(sessionId)) {\\r\\n                this.originCharacterParents.delete(sessionId);\\r\\n           
    }\\r\\n        });\\r\\n    }\\r\\n    /*\\r\\n        When the character falls,
    respawn the character at the respawn point.\\r\\n    */\\r\\n    *RespwanCharacter(sessionId)
    {\\r\\n        const carrierParent = this.carrierParents.get(sessionId);\\r\\n       
    while (UnityEngine_1.Vector3.op_Inequality(carrierParent.transform.position,
    this.respawnPoint.position)) {\\r\\n            carrierParent.transform.position
    = this.respawnPoint.position;\\r\\n            yield null;\\r\\n        }\\r\\n   
    }\\r\\n    // ------------------------ Funcions Necessary for sending messages
    to the server ------------------------\\r\\n    /* SendOnTryJumpForMovingToBlock()\\r\\n      
    - When the character attemps a move from a platform to a moving block.\\r\\n   
    */\\r\\n    SendOnTryJumpForMovingToBlock(position, platformPosition) {\\r\\n       
    const data = new ZEPETO_Multiplay_1.RoomData();\\r\\n        const relativePos
    = new ZEPETO_Multiplay_1.RoomData();\\r\\n        const platformPos = new ZEPETO_Multiplay_1.RoomData();\\r\\n       
    relativePos.Add(\\\"x\\\", position.x);\\r\\n        relativePos.Add(\\\"y\\\",
    position.y);\\r\\n        relativePos.Add(\\\"z\\\", position.z);\\r\\n       
    data.Add(\\\"relativePos\\\", relativePos.GetObject());\\r\\n        platformPos.Add(\\\"x\\\",
    platformPosition.x);\\r\\n        platformPos.Add(\\\"y\\\", platformPosition.y);\\r\\n       
    platformPos.Add(\\\"z\\\", platformPosition.z);\\r\\n        data.Add(\\\"platformPos\\\",
    platformPos.GetObject());\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnTryJumpForMovingToBlock,
    data.GetObject());\\r\\n    }\\r\\n    /* SendOnBlockTriggerEnter()\\r\\n      
    - When the enters a moving block trigger.\\r\\n    */\\r\\n    SendOnBlockTriggerEnter(blockIdx)
    {\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnBlockTriggerEnter, blockIdx);\\r\\n   
    }\\r\\n    /* SendOnBlockTriggerExit()\\r\\n       - When the player exits a
    moving block trigger.\\r\\n    */\\r\\n    SendOnBlockTriggerExit(blockIdx, relativePosition)
    {\\r\\n        const data = new ZEPETO_Multiplay_1.RoomData();\\r\\n        data.Add(\\\"blockIdx\\\",
    blockIdx);\\r\\n        const relativePos = new ZEPETO_Multiplay_1.RoomData();\\r\\n       
    relativePos.Add(\\\"x\\\", relativePosition.x);\\r\\n        relativePos.Add(\\\"y\\\",
    relativePosition.y);\\r\\n        relativePos.Add(\\\"z\\\", relativePosition.z);\\r\\n       
    data.Add(\\\"relativePos\\\", relativePos.GetObject());\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnCharacterJumpOnBlock,
    data.GetObject());\\r\\n    }\\r\\n    /* SendOnLandedBlock()\\r\\n       - Send
    relative position vectors when the local player lands on a block.\\r\\n    */\\r\\n   
    SendOnLandedBlock(blockIdx, relativeVector) {\\r\\n        const data = new ZEPETO_Multiplay_1.RoomData();\\r\\n       
    data.Add(\\\"blockIdx\\\", blockIdx);\\r\\n        const relativePos = new ZEPETO_Multiplay_1.RoomData();\\r\\n       
    relativePos.Add(\\\"x\\\", relativeVector.x);\\r\\n        relativePos.Add(\\\"y\\\",
    relativeVector.y);\\r\\n        relativePos.Add(\\\"z\\\", relativeVector.z);\\r\\n       
    data.Add(\\\"relativePos\\\", relativePos.GetObject());\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnCharacterLandedBlock,
    data.GetObject());\\r\\n    }\\r\\n    /* SendOnPlatformState()\\r\\n       -
    When the local character lands on a platform, send the relative position as a
    vector.\\r\\n    */\\r\\n    SendOnPlatformState() {\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnPlatformState);\\r\\n   
    }\\r\\n    /* SendOnFallTriggerEnter()\\r\\n       - When the local character
    falls, send a message to the server.\\r\\n    */\\r\\n    SendOnFallTriggerEnter()
    {\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnFallTriggerEnter);\\r\\n   
    }\\r\\n    /* SendTryJump()\\r\\n       - Whent he local character jumps from
    a block.\\r\\n    */\\r\\n    SendTryJump(isJumping) {\\r\\n        this.room.Send(this.MESSAGE_TYPE_OnTryJump,
    isJumping);\\r\\n    }\\r\\n    /* CheckPlayerOnBlock()\\r\\n       - Setup code
    for if a character in a room is already on a block\\r\\n    */\\r\\n    CheckPlayerOnBlock(sessionId)
    {\\r\\n        let player = this.room.State.players.get_Item(sessionId);\\r\\n       
    let serverBlockIndex = player.blockIndex;\\r\\n        if (player.isOnBlock)
    {\\r\\n            // In the case of a moving block. \\r\\n            if (this.IsMovingBlock(serverBlockIndex))
    {\\r\\n                // Check if a character is in the target block\\r\\n               
    if (false == this.movingBlockScripts[serverBlockIndex].HasPlayerInCarrierPool(sessionId))
    {\\r\\n                    // If none, create transport parent and initialize.
    \\r\\n                    this.SetCarrierParentAndZepetoContext(sessionId);\\r\\n                   
    let relativeVector = UnityEngine_1.Vector3.zero;\\r\\n                    let
    carrierParent = this.carrierParents.get(sessionId).transform;\\r\\n                   
    // Assign the block as the destination block. \\r\\n                    this.movingBlockScripts[serverBlockIndex].AddCharacterOnBlock(sessionId,
    relativeVector, carrierParent);\\r\\n                }\\r\\n            }\\r\\n           
    // In the case of an orbiting block.\\r\\n            else {\\r\\n               
    let newIndex = this.GetBlockIndex(serverBlockIndex);\\r\\n                //
    Check if a character is in the target block\\r\\n                if (false ==
    this.orbitingBlockScripts[newIndex].HasPlayerInCarrierPool(sessionId)) {\\r\\n                   
    // If none, create transport parent and initialize. \\r\\n                   
    this.SetCarrierParentAndZepetoContext(sessionId);\\r\\n                    let
    relativeVector = UnityEngine_1.Vector3.zero;\\r\\n                    let carrierParent
    = this.carrierParents.get(sessionId).transform;\\r\\n                    // Assign
    the block as the destination block. \\r\\n                    this.orbitingBlockScripts[newIndex].AddCharacterOnBlock(sessionId,
    relativeVector, carrierParent);\\r\\n                }\\r\\n            }\\r\\n       
    }\\r\\n    }\\r\\n    /* ResetOriginParent()\\r\\n       - Revert the carrierParent
    as the Zepeto Character parent.\\r\\n    */\\r\\n    ResetOriginParent(sessionId)
    {\\r\\n        const context = this.characterContexts.get(sessionId);\\r\\n       
    const originParent = this.originCharacterParents.get(sessionId);\\r\\n       
    const character = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character;\\r\\n       
    originParent.transform.position = this.carrierParents.get(sessionId).transform.position;\\r\\n       
    originParent.transform.rotation = this.carrierParents.get(sessionId).transform.rotation;\\r\\n       
    context.transform.SetParent(originParent.transform);\\r\\n        context.transform.localPosition
    = UnityEngine_1.Vector3.zero;\\r\\n        context.transform.localEulerAngles
    = UnityEngine_1.Vector3.zero;\\r\\n        originParent.SetActive(true);\\r\\n       
    /**\\r\\n         * If there is no input at the moment of changing from carrierParent
    to originParent, the base state is executed, and there is an issue where the
    character lands on the platform in JumpMove, Run, etc. and then jumps.\\r\\n        
    * TODO : In order to forcibly change the state, start a random gesture and cancel
    the gesture after a fixed amount of time. If there is no input for 0.2 seconds,
    apply the same logic as above if the gesture can be reset.\\r\\n         * */\\r\\n       
    if (character.CurrentState == ZEPETO_Character_Controller_1.CharacterState.JumpMove
    || character.CurrentState == ZEPETO_Character_Controller_1.CharacterState.Run)\\r\\n           
    this.StartCoroutine(this.CancelGestureCorutine(sessionId));\\r\\n    }\\r\\n   
    *CancelGestureCorutine(sessionId) {\\r\\n        const character = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character;\\r\\n       
    character.SetGesture(this.gesture);\\r\\n        yield new UnityEngine_1.WaitForSeconds(0.2);\\r\\n       
    while (character.CurrentState == ZEPETO_Character_Controller_1.CharacterState.Gesture)
    {\\r\\n            character.CancelGesture();\\r\\n            yield null;\\r\\n       
    }\\r\\n    }\\r\\n    /* SetCarrierParentAndZepetoContext()\\r\\n       - To
    move between blocks, take the Zepeto Context under the current character and
    attach it to the carrierParent.\\r\\n    */\\r\\n    SetCarrierParentAndZepetoContext(sessionId)
    {\\r\\n        // Instantiate transport parent if it doesn't exist. \\r\\n       
    if (false == this.carrierParents.has(sessionId)) {\\r\\n            var obj =
    UnityEngine_1.GameObject.Instantiate(this.carrierParentPrefab);\\r\\n           
    obj.GetComponent($typeof(CarrierParentController_1.default)).SetSessionId(sessionId);\\r\\n           
    obj.name = `CarrierParent_${sessionId}`;\\r\\n            this.carrierParents.set(sessionId,
    obj);\\r\\n        }\\r\\n        //Initialize gravity usage.\\r\\n        this.carrierParents.get(sessionId).GetComponent($typeof(UnityEngine_1.Rigidbody)).useGravity
    = false;\\r\\n        // Grab the carrierParent if it exists.\\r\\n        let
    carrierParent = this.carrierParents.get(sessionId);\\r\\n        const character
    = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character;\\r\\n       
    // There are cases where the carrierParent is in an odd position. Reset to charact
    transform position.\\r\\n        carrierParent.transform.position = character.transform.position;\\r\\n       
    carrierParent.transform.rotation = character.transform.rotation;\\r\\n       
    // After grabbing the context, cache it to the Map to revert it later.\\r\\n       
    const context = character.Context.gameObject;\\r\\n        this.characterContexts.set(sessionId,
    context);\\r\\n        // Set new carrierParent in context and initialize angle
    and position\\r\\n        context.transform.SetParent(carrierParent.transform);\\r\\n       
    context.transform.localEulerAngles = UnityEngine_1.Vector3.zero;\\r\\n       
    context.transform.localPosition = UnityEngine_1.Vector3.zero;\\r\\n        //
    Save the original parent to the map for later use. \\r\\n        this.originCharacterParents.set(sessionId,
    character.gameObject);\\r\\n        character.gameObject.SetActive(false); //
    Deactivate\\r\\n    }\\r\\n    /* GetBlockIndex()\\r\\n       - Return the index
    depending on whether the block is moving or orbiting.\\r\\n    */\\r\\n    GetBlockIndex(idx)
    {\\r\\n        if (idx < this.movingBlocks.length) {\\r\\n            return
    idx;\\r\\n        }\\r\\n        else {\\r\\n            return idx - this.movingBlocks.length;\\r\\n       
    }\\r\\n    }\\r\\n    /* TeleportBlockRelativePosition()\\r\\n        - Moves
    the remote character to the relative position of the target block, and registers
    the character as a transport target to the block.\\r\\n          The remote character
    registered in the transport target moves with the moving block.\\r\\n    */\\r\\n   
    TeleportCharacterOnBlock(message) {\\r\\n        const sessionId = message.sessionId;\\r\\n       
    // Jump related handling\\r\\n        if (this.carrierParents.has(sessionId))
    {\\r\\n            const animator = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character.ZepetoAnimator;\\r\\n           
    animator.runtimeAnimatorController = this.moveBlockAnimator;\\r\\n           
    animator.enabled = true;\\r\\n            animator.SetBool(\\\"JumpMove\\\",
    false);\\r\\n        }\\r\\n        // Stop the jump coroutine if in landing
    state\\r\\n        this.StopJumpToBlockCoroutine(sessionId);\\r\\n        const
    blockIdx = message.blockIndex;\\r\\n        const relativePos = new UnityEngine_1.Vector3(message.relativeX,
    message.relativeY, message.relativeZ);\\r\\n        let carrierParent = this.carrierParents.get(sessionId);\\r\\n       
    if (this.IsMovingBlock(blockIdx)) {\\r\\n            let blockIndex = this.GetBlockIndex(blockIdx);\\r\\n           
    this.movingBlockScripts[blockIndex].AddCharacterOnBlock(sessionId, relativePos,
    carrierParent.transform);\\r\\n        }\\r\\n        else {\\r\\n           
    let blockIndex = this.GetBlockIndex(blockIdx);\\r\\n            this.orbitingBlockScripts[blockIndex].AddCharacterOnBlock(sessionId,
    relativePos, carrierParent.transform);\\r\\n        }\\r\\n    }\\r\\n    /*
    TeleportSameBlockRelativePosition()\\r\\n        - Moves the remote character
    to the jump position within the same block, and deletes it from the carrier parent
    of the block.\\r\\n    */\\r\\n    OnBlockTriggerExit(message) {\\r\\n       
    const sessionId = message.sessionId;\\r\\n        const blockIdx = message.blockIndex;\\r\\n       
    const relativePos = new UnityEngine_1.Vector3(message.relativeX, message.relativeY,
    message.relativeZ);\\r\\n        if (false == this.carrierParents.has(sessionId))\\r\\n           
    return;\\r\\n        let carrierParent = this.carrierParents.get(sessionId);\\r\\n       
    let blockIndex = this.GetBlockIndex(blockIdx);\\r\\n        if (this.IsMovingBlock(blockIdx))
    {\\r\\n            this.movingBlockScripts[blockIndex].RemoveCharacterOnBlock(sessionId,
    relativePos, carrierParent.transform);\\r\\n            this.SetJumpToBlockSetting(sessionId,
    blockIndex, relativePos, this.MOVINGBLOCK);\\r\\n        }\\r\\n        else
    {\\r\\n            this.orbitingBlockScripts[blockIndex].RemoveCharacterOnBlock(sessionId,
    relativePos, carrierParent.transform);\\r\\n            this.SetJumpToBlockSetting(sessionId,
    blockIndex, relativePos, this.ORBITINGBLOCK);\\r\\n        }\\r\\n    }\\r\\n   
    /*IsMovingBlock()\\r\\n        -  Returns whether the current block is a moving
    block or not via block index.\\r\\n    */\\r\\n    IsMovingBlock(blockIdx) {\\r\\n       
    if (blockIdx < this.movingBlocks.length) {\\r\\n            return true;\\r\\n       
    }\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n   
    }\\r\\n    /*MoveBlockToPlatform()\\r\\n        - Resets to the original Zepeto
    Character settings the moment the player enters the platform with the carrier.\\r\\n   
    */\\r\\n    MoveBlockToPlatform(sessionId) {\\r\\n        // Return context to
    its original parent to execute synchronization logic\\r\\n        if (false ==
    this.characterContexts.has(sessionId)) {\\r\\n            return;\\r\\n       
    }\\r\\n        this.isLandingPlatform.set(sessionId, true);\\r\\n        this.ResetJumpToBlockSetting(sessionId);\\r\\n       
    this.ResetOriginParent(sessionId);\\r\\n    }\\r\\n    GetIsLandingPlatform(sessionId)
    {\\r\\n        return this.isLandingPlatform.get(sessionId);\\r\\n    }\\r\\n   
    SetIsLandingPlatform(sessionId, isLandingPlatform) {\\r\\n        this.isLandingPlatform.set(sessionId,
    isLandingPlatform);\\r\\n    }\\r\\n    /* ResetJumpToBlockSetting()\\r\\n       
    - Animators and coroutines that were altered for transport between moving blocks
    are returned to their original state.\\r\\n    */\\r\\n    ResetJumpToBlockSetting(sessionId)
    {\\r\\n        const animator = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character.ZepetoAnimator;\\r\\n       
    animator.runtimeAnimatorController = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.characterData.animatorController;\\r\\n       
    this.playerTargetPosition.delete(sessionId);\\r\\n        this.isLanding.delete(sessionId);\\r\\n       
    this.isLandingPlatform.delete(sessionId);\\r\\n        this.playerJumpDistances.delete(sessionId);\\r\\n       
    this.playerFlightDuration.delete(sessionId);\\r\\n        this.StopJumpToBlockCoroutine(sessionId);\\r\\n   
    }\\r\\n    SetJumpToBlockSetting(sessionId, blockIndex, relativeVector, blockFlag,
    platformPosition) {\\r\\n        // blockPosition is the position of the block
    the character was standing on, and startPosition is the position at the triggerExit
    point where the character exits while jumping.\\r\\n        var blockPosition
    = UnityEngine_1.Vector3.zero;\\r\\n        var startPosition = UnityEngine_1.Vector3.zero;\\r\\n       
    if (blockFlag == this.FIRSTBLOCK) { // If moving from platform to block. \\r\\n           
    //When leaving the platform, send platformPosition to get the jump position of
    the platform that is not at the position of the current block, and send the previously
    calculated relativeVector.\\r\\n            blockPosition = platformPosition
    ? platformPosition : relativeVector;\\r\\n            startPosition = this.carrierParents.get(sessionId).transform.position;\\r\\n       
    }\\r\\n        else {\\r\\n            if (blockFlag == this.MOVINGBLOCK) {\\r\\n               
    blockPosition = this.movingBlocks[blockIndex].transform.position;\\r\\n           
    }\\r\\n            else {\\r\\n                blockPosition = this.orbitingBlocks[blockIndex].transform.position;\\r\\n           
    }\\r\\n            startPosition = new UnityEngine_1.Vector3(blockPosition.x
    - relativeVector.x, blockPosition.y - relativeVector.y, blockPosition.z - relativeVector.z);\\r\\n       
    }\\r\\n        // Jump coroutine related settings. \\r\\n        this.isLanding.set(sessionId,
    false);\\r\\n        // Create a jump direction vector by subtracing the startPositon
    and the blockPosition \uCE90\uB9AD\uD130\uC758 \uC810\uD504 \uBC29\uD5A5 \uAD6C\uD558\uAE30
    - startPositon \uACFC blockPosition \uC0AC\uC774 \uBC29\uD5A5 \uBCA1\uD130\uB97C
    \uAD6C\uD569\uB2C8\uB2E4.\\r\\n        var anglePos = (UnityEngine_1.Vector3.op_Subtraction(startPosition,
    blockPosition));\\r\\n        // Character Jump Direction - If moving from platform
    to moving block, use the previously calulcated relativeVector\\r\\n        if
    (blockFlag == this.FIRSTBLOCK)\\r\\n            anglePos = relativeVector;\\r\\n       
    let angle = UnityEngine_1.Mathf.Atan2(anglePos.y, anglePos.x) * UnityEngine_1.Mathf.Rad2Deg;\\r\\n       
    angle = anglePos.z > 0 ? angle : angle * -1;\\r\\n        // Based on the angle
    at which the character jumps and exits, the estimated jump position is calculated
    by a fixed jump length value ( playerJumpDistance : 3).\\r\\n        let targetPosition
    = new UnityEngine_1.Vector3(startPosition.x + (UnityEngine_1.Mathf.Cos(angle
    * UnityEngine_1.Mathf.Deg2Rad) * this.playerJumpDistance), blockPosition.y, startPosition.z
    + (UnityEngine_1.Mathf.Sin(angle * UnityEngine_1.Mathf.Deg2Rad) * this.playerJumpDistance));\\r\\n       
    // The predicted jump position is saved for each character. \\r\\n        this.playerTargetPosition.set(sessionId,
    targetPosition);\\r\\n        // Start the jump\\r\\n        let jumpCoroutine
    = this.StartCoroutine(this.JumpToBlock(sessionId, startPosition, 45));\\r\\n       
    this.jumpCoroutines.set(sessionId, jumpCoroutine);\\r\\n        if (blockIndex
    < 0)\\r\\n            return;\\r\\n        if (this.carrierParents.has(sessionId))
    {\\r\\n            const animator = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.GetPlayer(sessionId).character.ZepetoAnimator;\\r\\n           
    animator.runtimeAnimatorController = this.moveBlockAnimator;\\r\\n           
    animator.enabled = true;\\r\\n            animator.SetBool(\\\"JumpMove\\\",
    true);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * JumpToBlock()\\r\\n    
    * Parabolic function used for jumping\\r\\n     * Takes the jumping character,
    the current jump start position, and the jump angle as parameters to jumps to
    the TargetPosition set in SetJumpToBlockSetting.\\r\\n    */\\r\\n    *JumpToBlock(sessionId,
    startPosition, angle) {\\r\\n        if (this.isLanding.get(sessionId))\\r\\n           
    return;\\r\\n        if (false == this.carrierParents.has(sessionId))\\r\\n           
    return;\\r\\n        //In order to make the character move in a parabola when
    jumping, we cache the transform of carrierParent and translate it.\\r\\n       
    let characterTransform = this.carrierParents.get(sessionId).transform;\\r\\n       
    let targetPosition = this.playerTargetPosition.get(sessionId);\\r\\n        let
    distance = UnityEngine_1.Vector3.Distance(targetPosition, startPosition);\\r\\n       
    let velocity = distance / (UnityEngine_1.Mathf.Sin(2 * angle * UnityEngine_1.Mathf.Deg2Rad)
    / ZEPETO_Character_Controller_1.ZepetoPlayers.gravity);\\r\\n        let x =
    UnityEngine_1.Mathf.Sqrt(velocity) * UnityEngine_1.Mathf.Cos(angle * UnityEngine_1.Mathf.Deg2Rad);\\r\\n       
    let y = UnityEngine_1.Mathf.Sqrt(velocity) * UnityEngine_1.Mathf.Sin(angle *
    UnityEngine_1.Mathf.Deg2Rad);\\r\\n        //Rotate the characte towards the
    target position.\\r\\n        let rot = UnityEngine_1.Vector3.op_Subtraction(targetPosition,
    startPosition);\\r\\n        characterTransform.rotation = UnityEngine_1.Quaternion.LookRotation(rot);\\r\\n       
    characterTransform.rotation = new UnityEngine_1.Quaternion(0, characterTransform.rotation.y,
    0, characterTransform.rotation.w);\\r\\n        let flightDuration = distance
    / x;\\r\\n        let elapseTime = 0;\\r\\n        while (elapseTime < flightDuration)
    {\\r\\n            characterTransform.Translate(0, (y - (ZEPETO_Character_Controller_1.ZepetoPlayers.gravity
    * elapseTime)) * UnityEngine_1.Time.deltaTime, x * UnityEngine_1.Time.deltaTime);\\r\\n           
    elapseTime += UnityEngine_1.Time.deltaTime;\\r\\n            yield null;\\r\\n       
    }\\r\\n        //Only run if jumping onto a platform.\\r\\n        if (this.isLandingPlatform.has(sessionId)
    && this.isLandingPlatform.get(sessionId))\\r\\n            this.carrierParents.get(sessionId).GetComponent($typeof(UnityEngine_1.Rigidbody)).useGravity
    = true;\\r\\n        if (this.jumpCoroutines.has(sessionId))\\r\\n           
    this.jumpCoroutines.delete(sessionId);\\r\\n    }\\r\\n    StopJumpToBlockCoroutine(sessionId)
    {\\r\\n        this.isLanding.set(sessionId, true);\\r\\n        if (this.jumpCoroutines.has(sessionId))
    {\\r\\n            this.StopCoroutine(this.jumpCoroutines.get(sessionId));\\r\\n           
    this.jumpCoroutines.delete(sessionId);\\r\\n        }\\r\\n        if (this.changeTargetPositionCoroutines.has(sessionId))
    {\\r\\n            this.StopCoroutine(this.changeTargetPositionCoroutines.get(sessionId));\\r\\n           
    this.changeTargetPositionCoroutines.delete(sessionId);\\r\\n        }\\r\\n   
    }\\r\\n}\\r\\nexports.default = BlockMultiplay;\\r\\n//# sourceMappingURL=data:application/json;base64,\",\"assetPath\":\"Assets/Scripts/Multiplay/BlockMultiplay.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"ZEPETO.World\",\"name\":\"multiplay\",\"type\":\"ZEPETO.World.ZepetoWorldMultiplay\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"movingBlocks\",\"type\":\"UnityEngine.GameObject[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"orbitingBlocks\",\"type\":\"UnityEngine.GameObject[]\",\"isArray\":true,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"carrierParentPrefab\",\"type\":\"UnityEngine.GameObject\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"respawnPoint\",\"type\":\"UnityEngine.Transform\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.AnimationModule\",\"name\":\"moveBlockAnimator\",\"type\":\"UnityEngine.RuntimeAnimatorController\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"UnityEngine.AnimationModule\",\"name\":\"gesture\",\"type\":\"UnityEngine.AnimationClip\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]}],\"name\":\"BlockMultiplay\",\"description\":\"\"},\"isCompiled\":true}"
  typescriptHash: 14548cf6cb0a4eb0f4eec6ce207b564d
  onlyWriteTrigger: 0
