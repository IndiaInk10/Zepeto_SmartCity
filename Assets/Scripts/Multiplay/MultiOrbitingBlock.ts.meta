fileFormatVersion: 2
guid: d3923a46fade797478185c7624f49ed6
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: '{"source":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\",
    { value: true });\r\nconst UnityEngine_1 = require(\"UnityEngine\");\r\nconst
    ZEPETO_Script_1 = require(\"ZEPETO.Script\");\r\nconst ZEPETO_Character_Controller_1
    = require(\"ZEPETO.Character.Controller\");\r\nconst BlockMultiplay_1 = require(\"./BlockMultiplay\");\r\nclass
    MultiOrbitingBlock extends ZEPETO_Script_1.ZepetoScriptBehaviour {\r\n    constructor()
    {\r\n        super(...arguments);\r\n        // Block orbit variables\r\n       
    this.rotSpeed = 0;\r\n        this.characterSpeedControlValue = 6;\r\n       
    // Multiplayer Sync Variables\r\n        this.isMultiplayMode = false;\r\n       
    this.syncCharacterTransforms = new Map();\r\n        this.myIdx = 0;\r\n       
    this.isLocalPlayerOnBlock = false;\r\n        this.prevBlockPosition = UnityEngine_1.Vector3.zero;\r\n       
    this.isLocalCharacterLanded = false;\r\n        this.IsJumpingOnBlock = false;\r\n       
    this.stopToDetectTriggerExit = false;\r\n    }\r\n    Start() {\r\n        this.startPosition
    = this.transform.position;\r\n        this.startRotation = this.transform.rotation;\r\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(()
    => {\r\n            this.localCharacter = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character;\r\n           
    this.localCharacterController = this.localCharacter.GetComponent($typeof(UnityEngine_1.CharacterController));\r\n       
    });\r\n        this.isLocalPlayerOnBlock = false;\r\n        this.isMultiplayMode
    = false;\r\n        this.rotateAroundAxis = UnityEngine_1.Vector3.down;\r\n       
    this.relativePosAtJump = UnityEngine_1.Vector3.zero;\r\n        this.renderer
    = this.GetComponentInChildren($typeof(UnityEngine_1.Renderer));\r\n    }\r\n   
    Update() {\r\n        // Block orbit\r\n        this.transform.RotateAround(this.rotatingPoint.position,
    this.rotateAroundAxis, this.rotSpeed * UnityEngine_1.Time.deltaTime);\r\n       
    // Move the characters along with the orbiting block\r\n        this.MoveCharacterWithBlock();\r\n   
    }\r\n    OnTriggerEnter(coll) {\r\n        if (coll.gameObject == this.localCharacter.gameObject)
    {\r\n            this.isLocalPlayerOnBlock = true;\r\n        }\r\n        else
    {\r\n            return;\r\n        }\r\n        if (false == this.isMultiplayMode)
    {\r\n            return;\r\n        }\r\n        this.blockMultiplayManager?.SendOnBlockTriggerEnter(this.myIdx);\r\n   
    }\r\n    OnTriggerStay(coll) {\r\n        if (false == this.isMultiplayMode)
    {\r\n            return;\r\n        }\r\n        if (coll.gameObject != this.localCharacter.gameObject)
    {\r\n            return;\r\n        }\r\n        // A conditional statement to
    send a message about the landing location only once.\r\n        if (this.isLocalCharacterLanded)
    {\r\n            this.isLocalCharacterLanded = false;\r\n            if (this.isMultiplayMode)
    {\r\n                let diff = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    this.localCharacter.transform.position);\r\n                this.blockMultiplayManager.SendOnLandedBlock(this.myIdx,
    diff);\r\n            }\r\n        }\r\n        if (this.localCharacter.CurrentState
    == ZEPETO_Character_Controller_1.CharacterState.JumpIdle || this.localCharacter.CurrentState
    == ZEPETO_Character_Controller_1.CharacterState.JumpMove) {\r\n            this.relativePosAtJump
    = UnityEngine_1.Vector3.op_Subtraction(this.transform.position, this.localCharacter.transform.position);\r\n       
    }\r\n    }\r\n    OnTriggerExit(coll) {\r\n        if (coll.gameObject == this.localCharacter.gameObject)
    {\r\n            this.isLocalPlayerOnBlock = false;\r\n        }\r\n        else
    {\r\n            return;\r\n        }\r\n        if (false == this.isMultiplayMode
    || true == this.stopToDetectTriggerExit) {\r\n            return;\r\n       
    }\r\n        // Send message to server if local player character (player.isOnBlock
    = false)\r\n        this.blockMultiplayManager?.SendOnBlockTriggerExit(this.myIdx,
    this.relativePosAtJump);\r\n    }\r\n    SetIsCharacterLandedOnBlock() {\r\n       
    this.isLocalCharacterLanded = true;\r\n    }\r\n    /* MoveCharacterWithBlock()\r\n      
    - Move the character along with the block\r\n    */\r\n    MoveCharacterWithBlock()
    {\r\n        // Block movement direction vector \r\n        let curBlockPosition
    = this.transform.position;\r\n        let forwardVector = (UnityEngine_1.Vector3.op_Subtraction(curBlockPosition,
    this.prevBlockPosition)).normalized;\r\n        this.prevBlockPosition = this.transform.position;\r\n       
    // Move the local character\r\n        if (this.isLocalPlayerOnBlock) {\r\n           
    this.localCharacterController.Move(UnityEngine_1.Vector3.op_Multiply(UnityEngine_1.Vector3.op_Multiply(forwardVector,
    (this.rotSpeed / this.characterSpeedControlValue)), UnityEngine_1.Time.deltaTime));\r\n       
    }\r\n        if (this.syncCharacterTransforms.size == 0)\r\n            return;\r\n       
    // Move the multiplay character\r\n        this.syncCharacterTransforms.forEach((characterTr,
    name) => {\r\n            if (null != characterTr) {\r\n                characterTr.RotateAround(this.rotatingPoint.position,
    this.rotateAroundAxis, this.rotSpeed * UnityEngine_1.Time.deltaTime);\r\n           
    }\r\n            else {\r\n                this.syncCharacterTransforms.delete(name);\r\n           
    }\r\n        });\r\n    }\r\n    // ---------------------------------- Multiplay
    -----------------------------------\r\n    /* SetBlockIdx()\r\n       - Sets
    the index of the current block to synchronize the position of the character on
    the block in multiplayer.\r\n    */\r\n    SetBlockIdx(idx) {\r\n        this.myIdx
    = idx;\r\n    }\r\n    /* SetMultiRoomElapsedTime()\r\n       - Sets the time
    elapsed in the current room for block position synchronization during multiplayer
    synchronization.\r\n    */\r\n    InitMultiplayMode(elapsedTime) {\r\n       
    // Enable multiplayer mode\r\n        this.isMultiplayMode = true;\r\n       
    if (null == this.blockMultiplayManager) {\r\n            this.blockMultiplayManager
    = BlockMultiplay_1.default.GetInstance();\r\n        }\r\n        // Execute
    only the first time.\r\n        this.CalculatePredictedTransform(elapsedTime);\r\n   
    }\r\n    /* CalculatePredictedPosition()\r\n       - Calculates the predicted
    position of the block based on the time elapsed in the current room.\r\n    */\r\n   
    CalculatePredictedTransform(elapsedTime) {\r\n        let center = this.rotatingPoint.position;\r\n       
    let axis = this.rotateAroundAxis;\r\n        let angle = this.rotSpeed * elapsedTime;\r\n       
    // Rotate Around Algorithm\r\n        let pos = this.startPosition;\r\n       
    let rot = UnityEngine_1.Quaternion.AngleAxis(angle, axis);\r\n        let dir
    = UnityEngine_1.Vector3.op_Subtraction(pos, center);\r\n        dir = UnityEngine_1.Quaternion.op_Multiply(rot,
    dir);\r\n        let predictedPos = UnityEngine_1.Vector3.op_Addition(center,
    dir);\r\n        let myRot = this.startRotation;\r\n        let predictedRot
    = UnityEngine_1.Quaternion.op_Multiply(UnityEngine_1.Quaternion.op_Multiply(UnityEngine_1.Quaternion.op_Multiply(myRot,
    UnityEngine_1.Quaternion.Inverse(myRot)), rot), myRot);\r\n        // Adjust
    the position and movement direction of the block to the predicted values\r\n       
    this.transform.position = predictedPos;\r\n        this.transform.rotation =
    predictedRot;\r\n        // Local character repositioning\r\n        if (this.isLocalPlayerOnBlock)
    {\r\n            this.StartCoroutine(this.TeleportCharacter(predictedPos));\r\n       
    }\r\n        // Synchronization characters will be coordinated by the server.\r\n       
    this.syncCharacterTransforms.forEach((characterTr, name) => {\r\n           
    if (null != characterTr) {\r\n                let characterPosition = new UnityEngine_1.Vector3(predictedPos.x,
    this.renderer.bounds.max.y, predictedPos.z);\r\n                characterTr.position
    = characterPosition;\r\n            }\r\n            else {\r\n               
    // If the player leaves the room while on a block.\r\n                this.syncCharacterTransforms.delete(name);\r\n           
    }\r\n        });\r\n    }\r\n    *TeleportCharacter(predictedPos) {\r\n       
    this.stopToDetectTriggerExit = true; // Ignore anything out of trigger during
    positioning\r\n        this.isLocalPlayerOnBlock = false; // To ensure that blocks
    don''t carry their characters while teleporting\r\n        while (true) {\r\n           
    yield null;\r\n            let adjustValue = UnityEngine_1.Random.Range(-0.3,
    0.3);\r\n            let targetPos = new UnityEngine_1.Vector3(predictedPos.x
    + adjustValue, this.renderer.bounds.max.y, predictedPos.z + adjustValue);\r\n           
    this.localCharacter.transform.position = targetPos;\r\n            if (UnityEngine_1.Vector3.op_Equality(this.localCharacter.transform.position,
    targetPos)) {\r\n                this.stopToDetectTriggerExit = false;\r\n               
    break;\r\n            }\r\n        }\r\n    }\r\n    /* AddCharacterOnBlock()\r\n     
    - Register the character to be carried by the block.\r\n    */\r\n    AddCharacterOnBlock(sessionId,
    relativeVector, carrierParent) {\r\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativeVector);\r\n        let result = new UnityEngine_1.Vector3(position.x,
    this.renderer.bounds.max.y, position.z);\r\n        carrierParent.position =
    result;\r\n        if (false == this.syncCharacterTransforms.has(sessionId))
    {\r\n            this.syncCharacterTransforms.set(sessionId, carrierParent);\r\n       
    }\r\n    }\r\n    /* RemoveCharacterOnBlock()\r\n       - Remove block from the
    character its carrying.\r\n    */\r\n    RemoveCharacterOnBlock(sessionId, relativePos,
    carrierParent) {\r\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativePos);\r\n        carrierParent.position = position;\r\n        if (this.syncCharacterTransforms.has(sessionId))
    {\r\n            this.syncCharacterTransforms.delete(sessionId);\r\n        }\r\n   
    }\r\n    HasPlayerInCarrierPool(sessionId) {\r\n        if (this.syncCharacterTransforms.has(sessionId))
    {\r\n            return true;\r\n        }\r\n        else {\r\n            return
    false;\r\n        }\r\n    }\r\n}\r\nexports.default = MultiOrbitingBlock;\r\n//#
    sourceMappingURL=data:application/json;base64,","assetPath":"Assets/Scripts/Multiplay/MultiOrbitingBlock.ts","manifest":{"properties":[{"assembly":"mscorlib","name":"rotSpeed","type":"System.Single","isArray":false,"initValue":["0"],"enumKeys":[],"enumValues":[],"attributes":[{"name":"Header","args":["\"Orbit
    Block\""]}]},{"assembly":"UnityEngine.CoreModule","name":"rotatingPoint","type":"UnityEngine.Transform","isArray":false,"initValue":[],"enumKeys":[],"enumValues":[],"attributes":[]},{"assembly":"mscorlib","name":"characterSpeedControlValue","type":"System.Single","isArray":false,"initValue":["6"],"enumKeys":[],"enumValues":[],"attributes":[]}],"name":"MultiOrbitingBlock","description":""},"isCompiled":true}'
  typescriptHash: 646f23adda8c117913fc1cf781df9779
  onlyWriteTrigger: 0
