fileFormatVersion: 2
guid: fca7624345a10ca449bb8b6e57496d74
importerOverride: ZEPETO.Script.Compiler:ZEPETO.Script:TypescriptAssetImporter
ScriptedImporter:
  internalIDToNameTable: []
  externalObjects: {}
  serializedVersion: 2
  userData: 
  assetBundleName: 
  assetBundleVariant: 
  script: {fileID: -1123457745, guid: 54cf806323ffe4418a4ce4cc63fe6b9d, type: 3}
  isAssemblyDeclarations: 0
  assembly: 
  generateAllTypes: 1
  types: []
  generateWrapper: 0
  overrideWrapperTypes: 0
  wrapperTypes: []
  WrapperFilters: []
  wrapperOutputDirectory: Generated
  compiledResult: "{\"source\":\"\\\"use strict\\\";\\r\\nObject.defineProperty(exports,
    \\\"__esModule\\\", { value: true });\\r\\nconst UnityEngine_1 = require(\\\"UnityEngine\\\");\\r\\nconst
    ZEPETO_Script_1 = require(\\\"ZEPETO.Script\\\");\\r\\nconst ZEPETO_Character_Controller_1
    = require(\\\"ZEPETO.Character.Controller\\\");\\r\\nconst BlockMultiplay_1 =
    require(\\\"./BlockMultiplay\\\");\\r\\nclass MultiMovingBlock extends ZEPETO_Script_1.ZepetoScriptBehaviour
    {\\r\\n    constructor() {\\r\\n        super(...arguments);\\r\\n        this.timeToMove
    = 1;\\r\\n        this.isLocalPlayerOnBlock = false;\\r\\n        this.characterRotateAroundSpeed
    = -1;\\r\\n        // Multiplay Sync variables\\r\\n        this.isMultiplayMode
    = false;\\r\\n        this.myIdx = 0;\\r\\n        this.relativePosAtTryJump
    = UnityEngine_1.Vector3.zero;\\r\\n        this.syncCharacterRigidbodies = new
    Map();\\r\\n        this.clientElapsedTime = 0;\\r\\n        this.shouldFixTransform
    = false;\\r\\n        this.stopToDetectTriggerExit = false;\\r\\n        /* SetIsCharacterLandedOnBlock()\\r\\n          
    - Called when a character lands on a block.\\r\\n        */\\r\\n        this.isLocalCharacterLanded
    = false;\\r\\n    }\\r\\n    Start() {\\r\\n        this.moveDirection = 1;\\r\\n       
    this.prevDirection = -1;\\r\\n        this.rigidbody.useGravity = false;\\r\\n       
    this.rigidbody.isKinematic = false;\\r\\n        this.rigidbody.freezeRotation
    = true;\\r\\n        this.rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n        this.startPosition = this.transform.position;\\r\\n       
    this.goalPosition = UnityEngine_1.Vector3.op_Addition(this.transform.position,
    UnityEngine_1.Vector3.op_Multiply(this.moveSpeed, this.timeToMove));\\r\\n       
    ZEPETO_Character_Controller_1.ZepetoPlayers.instance.OnAddedLocalPlayer.AddListener(()
    => {\\r\\n            const myPlayer = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer;\\r\\n           
    this.localCharacter = ZEPETO_Character_Controller_1.ZepetoPlayers.instance.LocalPlayer.zepetoPlayer.character;\\r\\n           
    this.localCharacterController = this.localCharacter.GetComponent($typeof(UnityEngine_1.CharacterController));\\r\\n       
    });\\r\\n        this.isLocalPlayerOnBlock = false;\\r\\n        this.isMultiplayMode
    = false;\\r\\n        this.renderer = this.GetComponentInChildren($typeof(UnityEngine_1.Renderer));\\r\\n   
    }\\r\\n    FixedUpdate() {\\r\\n        // Client Elapsed time\\r\\n        this.clientElapsedTime
    += UnityEngine_1.Time.fixedDeltaTime;\\r\\n        // Move the block based on
    the elapsed time in the room\\r\\n        this.MoveBlock(this.clientElapsedTime);\\r\\n       
    this.MoveLocalCharacterWithBlock();\\r\\n        if (false == this.isBlockRotating)\\r\\n           
    return;\\r\\n        // Block/Character Rotation\\r\\n        this.RotateBlock();\\r\\n       
    this.RotateCharacterWithBlock();\\r\\n    }\\r\\n    OnTriggerEnter(coll) {\\r\\n       
    if (coll.gameObject == this.localCharacter.gameObject) {\\r\\n            this.isLocalPlayerOnBlock
    = true;\\r\\n        }\\r\\n        else {\\r\\n            return;\\r\\n       
    }\\r\\n        if (false == this.isMultiplayMode) {\\r\\n            return;\\r\\n       
    }\\r\\n        // If the player is a local character, send a message to the server.
    (player.isOnBlock = true)\\r\\n        this.blockMultiplayManager?.SendOnBlockTriggerEnter(this.myIdx);\\r\\n   
    }\\r\\n    OnTriggerStay(coll) {\\r\\n        if (coll.gameObject != this.localCharacter.gameObject)
    {\\r\\n            return;\\r\\n        }\\r\\n        /* -------- Position Synchronization
    Logic --------*/\\r\\n        // Send a message when landing on floor\\r\\n       
    if (this.isLocalCharacterLanded) {\\r\\n            this.isLocalCharacterLanded
    = false;\\r\\n            if (this.isMultiplayMode) {\\r\\n                let
    relativeVector = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    this.localCharacter.transform.position);\\r\\n                this.blockMultiplayManager?.SendOnLandedBlock(this.myIdx,
    relativeVector);\\r\\n            }\\r\\n        }\\r\\n        // JUMP EVNET\\r\\n       
    if (this.localCharacter.CurrentState == ZEPETO_Character_Controller_1.CharacterState.JumpIdle
    || this.localCharacter.CurrentState == ZEPETO_Character_Controller_1.CharacterState.JumpMove)
    {\\r\\n            this.relativePosAtTryJump = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    this.localCharacter.transform.position);\\r\\n        }\\r\\n    }\\r\\n    OnTriggerExit(coll)
    {\\r\\n        if (coll.gameObject == this.localCharacter.gameObject) {\\r\\n           
    this.isLocalPlayerOnBlock = false;\\r\\n        }\\r\\n        else {\\r\\n           
    return;\\r\\n        }\\r\\n        if (false == this.isMultiplayMode || true
    == this.stopToDetectTriggerExit) {\\r\\n            return;\\r\\n        }\\r\\n       
    this.blockMultiplayManager?.SendOnBlockTriggerExit(this.myIdx, this.relativePosAtTryJump);\\r\\n   
    }\\r\\n    /* MoveCharacterWithBlock()\\r\\n       - Move the character along
    with the block\\r\\n    */\\r\\n    MoveLocalCharacterWithBlock() {\\r\\n       
    if (false == this.isLocalPlayerOnBlock)\\r\\n            return;\\r\\n       
    let velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed, this.moveDirection);\\r\\n       
    this.localCharacterController.Move(UnityEngine_1.Vector3.op_Multiply(velocity,
    UnityEngine_1.Time.fixedDeltaTime));\\r\\n    }\\r\\n    /* ChangeSyncCharacterVelocity()\\r\\n      
    - When the block velocity is changed, move the character to move at the same
    velocity\\r\\n    */\\r\\n    ChangeSyncCharacterVelocity() {\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            rb.velocity = this.rigidbody.velocity;\\r\\n       
    });\\r\\n    }\\r\\n    /* RotateBlock()\\r\\n        - Rotate block if the block
    rotation option is on\\r\\n    */\\r\\n    RotateBlock() {\\r\\n        let deltaRotation
    = UnityEngine_1.Quaternion.Euler(UnityEngine_1.Vector3.op_Multiply(this.eulerAngleVelocity,
    UnityEngine_1.Time.fixedDeltaTime));\\r\\n        this.rigidbody.MoveRotation(UnityEngine_1.Quaternion.op_Multiply(this.rigidbody.rotation,
    deltaRotation));\\r\\n    }\\r\\n    /* RotateCharacterWithBlock()\\r\\n      
    - Rotate the character with the block if the block rotation option is on\\r\\n   
    */\\r\\n    RotateCharacterWithBlock() {\\r\\n        // Local Character rotation\\r\\n       
    if (this.isLocalPlayerOnBlock) {\\r\\n            this.localCharacter.transform.RotateAround(this.transform.position,
    UnityEngine_1.Vector3.down, this.characterRotateAroundSpeed);\\r\\n        }\\r\\n       
    // Multi Character rotation\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            if (null != rb) {\\r\\n                rb.gameObject.transform.RotateAround(this.transform.position,
    UnityEngine_1.Vector3.down, this.characterRotateAroundSpeed);\\r\\n           
    }\\r\\n            else {\\r\\n                this.syncCharacterRigidbodies.delete(name);\\r\\n           
    }\\r\\n        });\\r\\n    }\\r\\n    // ----------------------------------
    Multiplay -----------------------------------\\r\\n    /* InitMultiplayMode()\\r\\n      
    - Resets the values for multiplayer sync when first entering or returning from
    the background.\\r\\n    */\\r\\n    InitMultiplayMode(elapsedTime) {\\r\\n       
    this.isMultiplayMode = true;\\r\\n        if (null == this.blockMultiplayManager)
    {\\r\\n            this.blockMultiplayManager = BlockMultiplay_1.default.GetInstance();\\r\\n       
    }\\r\\n        this.shouldFixTransform = true;\\r\\n        // Apply the predicted
    location based on server time for the first time\\r\\n        this.MoveBlock(elapsedTime);\\r\\n       
    // If the server time changes, the elapsed time of the client is also adjusted
    accordingly.\\r\\n        this.clientElapsedTime = elapsedTime;\\r\\n    }\\r\\n   
    /* CalculatePredictedPosition()\\r\\n       - Sets the movement direction of
    the block based on the time elapsed in the current server's room.\\r\\n    */\\r\\n   
    MoveBlock(elapsedTime) {\\r\\n        let predictedDir = (UnityEngine_1.Mathf.Floor(elapsedTime
    / this.timeToMove)) % 2 == 0 ? 1 : -1;\\r\\n        // movement direction assigned
    as predicted direction\\r\\n        this.moveDirection = predictedDir;\\r\\n       
    // If the velocity is different than the previous, then reapply\\r\\n       
    if (this.moveDirection != this.prevDirection) {\\r\\n            // Reapply movement
    speed.\\r\\n            this.rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n            // Reapply the velocity of the other multiplay
    characters\\r\\n            this.ChangeSyncCharacterVelocity();\\r\\n       
    }\\r\\n        this.prevDirection = this.moveDirection;\\r\\n        // Adjust
    the location only when you log in for the first time and when you return from
    the background\\r\\n        if (this.shouldFixTransform) {\\r\\n            this.CalculatePredictedPosition(elapsedTime);\\r\\n       
    }\\r\\n    }\\r\\n    CalculatePredictedPosition(elapsedTime) {\\r\\n       
    this.shouldFixTransform = false;\\r\\n        let basePos = this.moveDirection
    == 1 ? this.startPosition : this.goalPosition;\\r\\n        let predictedPos
    = UnityEngine_1.Vector3.op_Addition(basePos, UnityEngine_1.Vector3.op_Multiply((UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection)), (elapsedTime % this.timeToMove)));\\r\\n        // Adjust
    block position\\r\\n        this.transform.position = predictedPos;\\r\\n       
    // Adjust Local/Multi character position\\r\\n        this.ResetCharactersTransform(predictedPos);\\r\\n   
    }\\r\\n    ResetCharactersTransform(predictedPos) {\\r\\n        // Local character
    position adjustment.\\r\\n        if (this.isLocalPlayerOnBlock) {\\r\\n           
    this.StartCoroutine(this.TeleportCharacter(predictedPos));\\r\\n        }\\r\\n       
    // Multi character position adjustment\\r\\n        this.syncCharacterRigidbodies.forEach((rb,
    name) => {\\r\\n            if (null != rb) {\\r\\n                let adjustValue
    = UnityEngine_1.Random.Range(-0.3, 0.3);\\r\\n                let characterPosition
    = new UnityEngine_1.Vector3(predictedPos.x + adjustValue, this.renderer.bounds.max.y,
    predictedPos.z + adjustValue);\\r\\n                rb.transform.position = characterPosition;\\r\\n               
    this.ChangeSyncCharacterVelocity();\\r\\n            }\\r\\n            else
    {\\r\\n                // If leaving while on top of a block\\r\\n               
    this.syncCharacterRigidbodies.delete(name);\\r\\n            }\\r\\n        });\\r\\n   
    }\\r\\n    /* TeleportCharacter()\\r\\n       - Move the character onto a block.\\r\\n   
    */\\r\\n    *TeleportCharacter(predictedPos) {\\r\\n        this.stopToDetectTriggerExit
    = true; // Ignore anything out of trigger during positioning\\r\\n        this.isLocalPlayerOnBlock
    = false; // To ensure that blocks don't carry characters while teleporting\\r\\n       
    while (true) {\\r\\n            yield null;\\r\\n            let targetPos =
    new UnityEngine_1.Vector3(predictedPos.x, this.renderer.bounds.max.y, predictedPos.z);\\r\\n           
    this.localCharacter.transform.position = targetPos;\\r\\n            if (UnityEngine_1.Vector3.op_Equality(this.localCharacter.transform.position,
    targetPos)) {\\r\\n                this.stopToDetectTriggerExit = false;\\r\\n               
    break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    /* AddCharacterOnBlock()\\r\\n      
    - Assign the character to be carried by the block.\\r\\n    */\\r\\n    AddCharacterOnBlock(sessionId,
    relativeVector, carrierParent) {\\r\\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativeVector);\\r\\n        let result = new UnityEngine_1.Vector3(position.x,
    this.renderer.bounds.max.y, position.z);\\r\\n        carrierParent.position
    = result;\\r\\n        if (false == this.syncCharacterRigidbodies.has(sessionId))
    {\\r\\n            let rigidbody = carrierParent.GetComponent($typeof(UnityEngine_1.Rigidbody));\\r\\n           
    this.syncCharacterRigidbodies.set(sessionId, rigidbody);\\r\\n            //
    velocity intialization\\r\\n            rigidbody.velocity = UnityEngine_1.Vector3.op_Multiply(this.moveSpeed,
    this.moveDirection);\\r\\n        }\\r\\n    }\\r\\n    /* RemoveCharacterOnBlock()\\r\\n      
    - Remove the character from the carrier parent.\\r\\n    */\\r\\n    RemoveCharacterOnBlock(sessionId,
    relativePos, carrierParent) {\\r\\n        let position = UnityEngine_1.Vector3.op_Subtraction(this.transform.position,
    relativePos);\\r\\n        carrierParent.position = position;\\r\\n        if
    (this.syncCharacterRigidbodies.has(sessionId)) {\\r\\n            // \uB098\uAC08
    \uB550 \uB2E4\uC2DC velocity\uB97C \uCD08\uAE30\uD654\\r\\n            this.syncCharacterRigidbodies.get(sessionId).velocity
    = UnityEngine_1.Vector3.zero;\\r\\n            this.syncCharacterRigidbodies.delete(sessionId);\\r\\n       
    }\\r\\n    }\\r\\n    /* HasPlayerInCarrierPool()\\r\\n       - Check if a specific
    character is on a block.\\r\\n    */\\r\\n    HasPlayerInCarrierPool(sessionId)
    {\\r\\n        if (this.syncCharacterRigidbodies.has(sessionId)) {\\r\\n           
    return true;\\r\\n        }\\r\\n        else {\\r\\n            return false;\\r\\n       
    }\\r\\n    }\\r\\n    SetIsCharacterLandedOnBlock() {\\r\\n        this.isLocalCharacterLanded
    = true;\\r\\n    }\\r\\n    /* SetBlockIdx()\\r\\n        - Sets the index of
    the current block to synchronize the position of the character on the block in
    multiplayer.\\r\\n    */\\r\\n    SetBlockIdx(idx) {\\r\\n        this.myIdx
    = idx;\\r\\n    }\\r\\n}\\r\\nexports.default = MultiMovingBlock;\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlNb3ZpbmdCbG9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk11bHRpTW92aW5nQmxvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0k7QUFFdEksaURBQXFEO0FBQ3JELDZFQUE0RjtBQUM1RixxREFBOEM7QUFFOUMsTUFBcUIsZ0JBQWlCLFNBQVEscUNBQXFCO0lBQW5FOztRQU1XLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFNdEIseUJBQW9CLEdBQVksS0FBSyxDQUFDO1FBU3ZDLCtCQUEwQixHQUFXLENBQUMsQ0FBQyxDQUFDO1FBRS9DLDJCQUEyQjtRQUVuQixvQkFBZSxHQUFZLEtBQUssQ0FBQztRQUNqQyxVQUFLLEdBQVcsQ0FBQyxDQUFDO1FBRWxCLHlCQUFvQixHQUFZLHFCQUFPLENBQUMsSUFBSSxDQUFDO1FBQzdDLDZCQUF3QixHQUEyQixJQUFJLEdBQUcsRUFBcUIsQ0FBQztRQUVoRixzQkFBaUIsR0FBVyxDQUFDLENBQUM7UUFHOUIsdUJBQWtCLEdBQVksS0FBSyxDQUFDO1FBcUtwQyw0QkFBdUIsR0FBWSxLQUFLLENBQUM7UUEwSGpEOztVQUVFO1FBQ00sMkJBQXNCLEdBQVksS0FBSyxDQUFDO0lBWXBELENBQUM7SUExU1csS0FBSztRQUVULElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBcEQwRSxxQkFBTyxDQXNWNnNULFdBQVksQ0FsU3Z5VCxJQUFJLENBQUMsU0FBUyxFQUFHLElBQUksQ0FBQyxhQUFhLENB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\",\"assetPath\":\"Assets/Scripts/Multiplay/MultiMovingBlock.ts\",\"manifest\":{\"properties\":[{\"assembly\":\"UnityEngine.PhysicsModule\",\"name\":\"rigidbody\",\"type\":\"UnityEngine.Rigidbody\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Move
    Block\\\"\"]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"moveSpeed\",\"type\":\"UnityEngine.Vector3\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"timeToMove\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[\"1\"],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"isBlockRotating\",\"type\":\"System.Boolean\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[{\"name\":\"Header\",\"args\":[\"\\\"Rotate
    Block (Option)\\\"\"]}]},{\"assembly\":\"UnityEngine.CoreModule\",\"name\":\"eulerAngleVelocity\",\"type\":\"UnityEngine.Vector3\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]},{\"assembly\":\"mscorlib\",\"name\":\"characterRotateAroundSpeed\",\"type\":\"System.Single\",\"isArray\":false,\"initValue\":[],\"enumKeys\":[],\"enumValues\":[],\"attributes\":[]}],\"name\":\"MultiMovingBlock\",\"description\":\"\"},\"isCompiled\":true}"
  typescriptHash: 801f46083182183fdca378960ad9ebbc
  onlyWriteTrigger: 0
